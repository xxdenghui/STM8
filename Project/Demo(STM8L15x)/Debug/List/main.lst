###############################################################################
#
# IAR C/C++ Compiler V3.10.1.201 for STM8                 22/Mar/2019  11:26:16
# Copyright 2010-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  
#        G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\User\main.c
#    Command line =  
#        -f C:\Users\new06\AppData\Local\Temp\EW9A4D.tmp
#        ("G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\User\main.c" -e
#        -On --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --debug --code_model small --data_model medium -o
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\Debug\Obj"
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\stm8\LIB\dlstm8smn.h" -D STM8L15 -lCN
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\Debug\List" -lB
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\Debug\List" -I
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\..\..\Libraries\STM8L15x_StdPeriph_Driver\inc\"
#        -I
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\..\..\Libraries\Device\"
#        -I
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\..\..\Libraries\HAL\"
#        -I
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\..\..\Libraries\Bus\"
#        -I
#        "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\..\..\Libraries\CRC\"
#        -I "G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\User\" --vregs
#        16)
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\Debug\List\main.lst
#    Object file  =  
#        G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\Debug\Obj\main.o
#
###############################################################################

G:\Darren\MCU\STM8\Software\Project\Demo(STM8L15x)\User\main.c
      1          /**
      2            ******************************************************************************
      3            * @file     Project/USER/main.c
      4            * @author   Darren
      5            * @version  V1.0.0
      6            * @date     2017-01-15
      7            * @brief    watering control
      8            * @Hardware CT1501-V1
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * 
     13            ******************************************************************************
     14            */
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "conf.h"
     18          
     19          /* Private defines -----------------------------------------------------------*/
     20          #define SYS_CK                  (uint8_t)0x01   // systick flag
     21          #define SYS_HOLD                (uint8_t)0x02   // sys hold flag
     22          
     23          #define TRG_PORT                GPIOD         
     24          #define TRG_PIN                 GPIO_PIN_1    
     25          #define EN_PORT                 GPIOD           
     26          #define EN_PIN                  GPIO_PIN_0         
     27          
     28          #define TURN_PORT				GPIOB
     29          
     30          // task ready mark
     31          #define TASK_KEY_READY			0x01
     32          #define TASK_TEST_BLINK_READY	0x02
     33          
     34          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     35          uint8_t sys_status = 0;
   \                     sys_status:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     36          uint8_t tasks_ready = 0;
   \                     tasks_ready:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     37          uint8_t systick1 = 0;
   \                     systick1:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     38          uint8_t systick2 = 0;
   \                     systick2:
   \   000000              DS8 1
     39          
     40          /* The system clock information variables */

   \                                 In section .near.bss, align 1
     41          uint8_t sysclock = 0;           // systerm clock MHz
   \                     sysclock:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     42          uint8_t sysclockType = 0;       // systerm clock source type
   \                     sysclockType:
   \   000000              DS8 1

   \                                 In section .near.data, align 1
     43          char sysclock_string[3] = "00";   // systerm clock string
   \                     sysclock_string:
   \   000000 30 30 00     DC8 "00"

   \                                 In section .near.bss, align 1
     44          uint8_t systick_times = 0;      // systick counter
   \                     systick_times:
   \   000000              DS8 1
     45          
     46          
     47          /* Private function prototypes -----------------------------------------------*/
     48          void SystemInit( void );
     49          void TIme4_CallBack( void );
     50          
     51          void task_key(void);
     52          void task_test_blink(void);
     53          
     54          /* Private functions ---------------------------------------------------------*/
     55          

   \                                 In section .near_func.text, align 1
     56          int main( void )
     57          {
     58          	/* Initialization function */
     59          	SystemInit(  );
   \                     main:
   \   000000 CD ....      CALL      L:SystemInit
     60          
     61          	/* Interface loop */
     62          	while ( 1 ){
     63          		task_key();
   \                     ??main_0:
   \   000003 CD ....      CALL      L:task_key
     64          		task_test_blink();
   \   000006 CD ....      CALL      L:task_test_blink
   \   000009 20 F8        JRA       L:??main_0
     65          	}  
     66          }
     67          

   \                                 In section .near_func.text, align 1
     68          void SystemInit( void )
     69          {
     70          	disableInterrupts(  );
   \                     SystemInit:
   \   000000 9B           SIM
     71          	/* clock initialization *******************************************************/
     72          	/* Systerm clock source init */
     73          	CLK_DeInit(  ); 
   \   000001 CD ....      CALL      L:CLK_DeInit
     74          	CLK_HSEConfig( CLK_HSE_OFF ); 
   \   000004 4F           CLR       A
   \   000005 CD ....      CALL      L:CLK_HSEConfig
     75          	CLK_LSEConfig( CLK_LSE_OFF );
   \   000008 4F           CLR       A
   \   000009 CD ....      CALL      L:CLK_LSEConfig
     76          	CLK_ClockSwitchCmd( ENABLE ); 			// open sysclock choose switch
   \   00000C A6 01        LD        A, #0x1
   \   00000E CD ....      CALL      L:CLK_ClockSwitchCmd
     77          	CLK_SYSCLKSourceConfig( CLK_SYSCLKSource_HSI ); // sysclock choose
   \   000011 A6 01        LD        A, #0x1
   \   000013 CD ....      CALL      L:CLK_SYSCLKSourceConfig
     78          	CLK_SYSCLKDivConfig( CLK_SYSCLKDiv_1 ); 
   \   000016 4F           CLR       A
   \   000017 CD ....      CALL      L:CLK_SYSCLKDivConfig
     79          	//sysclockSource = CLK_GetSYSCLKSource(  ); // get sysclock source
     80          	//sysclockfreq = CLK_GetClockFreq( )/1000;  // get clock frequence KHz
     81          
     82          	/* I/O initialization *******************************************************/
     83          	/* running led pin & fan pin & air pin initialization */
     84          	GPIO_Init( TURN_PORT, GPIO_PIN_ALL, GPIO_MODE_OUT_PP_LOW_FAST );  // turnde port init
   \   00001A 35 E0 ....   MOV       S:?b0, #0xe0
   \   00001E A6 FF        LD        A, #0xff
   \   000020 AE 5005      LDW       X, #0x5005
   \   000023 CD ....      CALL      L:GPIO_Init
     85          	GPIO_Init( GPIOD, GPIO_PIN_2|GPIO_PIN_3, GPIO_MODE_OUT_PP_LOW_FAST );  // turnde port init
   \   000026 35 E0 ....   MOV       S:?b0, #0xe0
   \   00002A A6 0C        LD        A, #0xc
   \   00002C AE 500F      LDW       X, #0x500f
   \   00002F CD ....      CALL      L:GPIO_Init
     86          	GPIO_Init( EN_PORT, EN_PIN, GPIO_MODE_OUT_PP_LOW_FAST );  // EN Pin init
   \   000032 35 E0 ....   MOV       S:?b0, #0xe0
   \   000036 A6 01        LD        A, #0x1
   \   000038 AE 500F      LDW       X, #0x500f
   \   00003B CD ....      CALL      L:GPIO_Init
     87          	GPIO_Init( TRG_PORT, TRG_PIN, GPIO_MODE_IN_PU_NO_IT );  // CL Pin init
   \   00003E 35 40 ....   MOV       S:?b0, #0x40
   \   000042 A6 02        LD        A, #0x2
   \   000044 AE 500F      LDW       X, #0x500f
   \   000047 CD ....      CALL      L:GPIO_Init
     88          	
     89          	/* Peripherals initialization ***********************************************/
     90          	/* usart initialization */
     91          	uart_cfg( uart3, 9600, no_it );
   \   00004A 5F           CLRW      X
   \   00004B 89           PUSHW     X
   \   00004C AE 2580      LDW       X, #0x2580
   \   00004F BF ..        LDW       S:?w1, X
   \   000051 5F           CLRW      X
   \   000052 BF ..        LDW       S:?w0, X
   \   000054 85           POPW      X
   \   000055 A6 03        LD        A, #0x3
   \   000057 CD ....      CALL      L:uart_cfg
     92          	
     93          	/* systick timer using TIM4 */
     94          	CLK_PeripheralClockConfig( CLK_Peripheral_TIM4, ENABLE );
   \   00005A 35 01 ....   MOV       S:?b0, #0x1
   \   00005E A6 02        LD        A, #0x2
   \   000060 CD ....      CALL      L:CLK_PeripheralClockConfig
     95          	TIM4_TimeBaseInit( TIM4_Prescaler_64, 249 );  // 64p=250KHz, 249+1 priod=1ms
   \   000063 35 F9 ....   MOV       S:?b0, #0xf9
   \   000067 A6 06        LD        A, #0x6
   \   000069 CD ....      CALL      L:TIM4_TimeBaseInit
     96          	TIM4_ClearFlag( TIM4_FLAG_Update );
   \   00006C A6 01        LD        A, #0x1
   \   00006E CD ....      CALL      L:TIM4_ClearFlag
     97          	TIM4_ITConfig( TIM4_IT_Update, ENABLE );
   \   000071 35 01 ....   MOV       S:?b0, #0x1
   \   000075 A6 01        LD        A, #0x1
   \   000077 CD ....      CALL      L:TIM4_ITConfig
     98          	TIM4_Cmd( ENABLE );
   \   00007A A6 01        LD        A, #0x1
   \   00007C CD ....      CALL      L:TIM4_Cmd
     99          
    100          	/* Initialization information ***********************************************/
    101          	sysclockType = CLK_GetSYSCLKSource(  );
   \   00007F CD ....      CALL      L:CLK_GetSYSCLKSource
   \   000082 C7 ....      LD        L:sysclockType, A
    102          	sysclock = CLK_GetClockFreq( )/1000000;
   \   000085 CD ....      CALL      L:CLK_GetClockFreq
   \   000088 CD ....      CALL      L:?udiv32_l0_l0_dl
   \   00008B 000F4240     DC32      0xf4240
   \   00008F B6 ..        LD        A, S:?b3
   \   000091 C7 ....      LD        L:sysclock, A
    103          	Dec2String( sysclock, sysclock_string );
   \   000094 AE ....      LDW       X, #sysclock_string
   \   000097 C6 ....      LD        A, L:sysclock
   \   00009A CD ....      CALL      L:Dec2String
    104          
    105          	/* Print the initialization information  */
    106          	uart_printf( uart3, "Start working...\r" );
   \   00009D AE ....      LDW       X, #?_0
   \   0000A0 A6 03        LD        A, #0x3
   \   0000A2 CD ....      CALL      L:uart_printf
    107          	uart_printf( uart3, "Systerm Clock is: " );
   \   0000A5 AE ....      LDW       X, #?_1
   \   0000A8 A6 03        LD        A, #0x3
   \   0000AA CD ....      CALL      L:uart_printf
    108          	uart_printf( uart3, sysclock_string );
   \   0000AD AE ....      LDW       X, #sysclock_string
   \   0000B0 A6 03        LD        A, #0x3
   \   0000B2 CD ....      CALL      L:uart_printf
    109          	uart_printf( uart3, "MHz\r" );
   \   0000B5 AE ....      LDW       X, #?_2
   \   0000B8 A6 03        LD        A, #0x3
   \   0000BA CD ....      CALL      L:uart_printf
    110          	uart_printf( uart3, "Systerm Clock source is: " );
   \   0000BD AE ....      LDW       X, #?_3
   \   0000C0 A6 03        LD        A, #0x3
   \   0000C2 CD ....      CALL      L:uart_printf
    111          	switch ( sysclockType ){
   \   0000C5 C6 ....      LD        A, L:sysclockType
   \   0000C8 4A           DEC       A
   \   0000C9 27 0D        JREQ      L:??SystemInit_0
   \   0000CB 4A           DEC       A
   \   0000CC 27 14        JREQ      L:??SystemInit_1
   \   0000CE A0 02        SUB       A, #0x2
   \   0000D0 27 1A        JREQ      L:??SystemInit_2
   \   0000D2 A0 04        SUB       A, #0x4
   \   0000D4 27 20        JREQ      L:??SystemInit_3
   \   0000D6 20 26        JRA       L:??SystemInit_4
    112          	case CLK_SYSCLKSource_HSI: uart_printf( uart3, "HSI\r" ); break;
   \                     ??SystemInit_0:
   \   0000D8 AE ....      LDW       X, #?_4
   \   0000DB A6 03        LD        A, #0x3
   \   0000DD CD ....      CALL      L:uart_printf
   \   0000E0 20 1C        JRA       L:??SystemInit_4
    113          	case CLK_SYSCLKSource_LSI: uart_printf( uart3, "LSI\r" ); break;
   \                     ??SystemInit_1:
   \   0000E2 AE ....      LDW       X, #?_5
   \   0000E5 A6 03        LD        A, #0x3
   \   0000E7 CD ....      CALL      L:uart_printf
   \   0000EA 20 12        JRA       L:??SystemInit_4
    114          	case CLK_SYSCLKSource_HSE: uart_printf( uart3, "HSE\r" ); break;
   \                     ??SystemInit_2:
   \   0000EC AE ....      LDW       X, #?_6
   \   0000EF A6 03        LD        A, #0x3
   \   0000F1 CD ....      CALL      L:uart_printf
   \   0000F4 20 08        JRA       L:??SystemInit_4
    115          	case CLK_SYSCLKSource_LSE: uart_printf( uart3, "LSE\r" ); break;
   \                     ??SystemInit_3:
   \   0000F6 AE ....      LDW       X, #?_7
   \   0000F9 A6 03        LD        A, #0x3
   \   0000FB CD ....      CALL      L:uart_printf
    116          	} 
    117          
    118          	/* enable Interruput */ 
    119          	enableInterrupts(  );
   \                     ??SystemInit_4:
   \   0000FE 9A           RIM
    120          }
   \   0000FF 81           RET
    121          
    122          

   \                                 In section .near_func.text, align 1
    123          void task_key(void)
    124          {
    125          	if ( tasks_ready & TASK_KEY_READY ){
   \                     task_key:
   \   000000 7201 .... 04 BTJF      L:tasks_ready, #0x0, L:??task_key_0
    126          		
    127          		tasks_ready &= ~TASK_KEY_READY;
   \   000005 7211 ....    BRES      L:tasks_ready, #0x0
    128          	}
    129          }
   \                     ??task_key_0:
   \   000009 81           RET
    130          

   \                                 In section .near_func.text, align 1
    131          void task_test_blink(void)
    132          {
    133          	if ( tasks_ready & TASK_TEST_BLINK_READY ){
   \                     task_test_blink:
   \   000000 7203 .... 0C BTJF      L:tasks_ready, #0x1, L:??task_test_blink_0
    134          		GPIO_WriteReverse(TURN_PORT, GPIO_PIN_ALL );
   \   000005 A6 FF        LD        A, #0xff
   \   000007 AE 5005      LDW       X, #0x5005
   \   00000A CD ....      CALL      L:GPIO_WriteReverse
    135          		tasks_ready &= ~TASK_TEST_BLINK_READY;
   \   00000D 7213 ....    BRES      L:tasks_ready, #0x1
    136          	}
    137          }
   \                     ??task_test_blink_0:
   \   000011 81           RET
    138          
    139          /* IRQHandler functions *******************************************************/

   \                                 In section .near_func.text, align 1
    140          void TIme4_CallBack( void )
    141          {
    142          	if ( systick1++ >= 100 ){	// 1ms*100=100ms
   \                     TIme4_CallBack:
   \   000000 55 .... .... MOV       S:?b0, L:systick1
   \   000005 B6 ..        LD        A, S:?b0
   \   000007 4C           INC       A
   \   000008 C7 ....      LD        L:systick1, A
   \   00000B B6 ..        LD        A, S:?b0
   \   00000D A1 64        CP        A, #0x64
   \   00000F 25 21        JRC       L:??TIme4_CallBack_0
    143          		systick1 = 0;
   \   000011 725F ....    CLR       L:systick1
    144          		
    145          		tasks_ready |= TASK_KEY_READY;	// task key
   \   000015 7210 ....    BSET      L:tasks_ready, #0x0
    146          		
    147          		if ( systick2++ >= 10 ){	// 100ms*10=1S
   \   000019 55 .... .... MOV       S:?b0, L:systick2
   \   00001E B6 ..        LD        A, S:?b0
   \   000020 4C           INC       A
   \   000021 C7 ....      LD        L:systick2, A
   \   000024 B6 ..        LD        A, S:?b0
   \   000026 A1 0A        CP        A, #0xa
   \   000028 25 08        JRC       L:??TIme4_CallBack_0
    148          			systick2 = 0;
   \   00002A 725F ....    CLR       L:systick2
    149          			
    150          			tasks_ready |= TASK_TEST_BLINK_READY;	// task test blink
   \   00002E 7212 ....    BSET      L:tasks_ready, #0x1
    151          		}
    152          	}
    153          }
   \                     ??TIme4_CallBack_0:
   \   000032 81           RET

   \                                 In section .near.rodata, align 1
   \                     ?_0:
   \   000000 53 74 61 72  DC8 "Start working...\015"
   \          74 20 77 6F 

   \                                 In section .near.rodata, align 1
   \                     ?_1:
   \   000000 53 79 73 74  DC8 "Systerm Clock is: "
   \          65 72 6D 20 

   \                                 In section .near.rodata, align 1
   \                     ?_2:
   \   000000 4D 48 7A 0D  DC8 "MHz\015"
   \          00          

   \                                 In section .near.rodata, align 1
   \                     ?_3:
   \   000000 53 79 73 74  DC8 "Systerm Clock source is: "
   \          65 72 6D 20 

   \                                 In section .near.rodata, align 1
   \                     ?_4:
   \   000000 48 53 49 0D  DC8 "HSI\015"
   \          00          

   \                                 In section .near.rodata, align 1
   \                     ?_5:
   \   000000 4C 53 49 0D  DC8 "LSI\015"
   \          00          

   \                                 In section .near.rodata, align 1
   \                     ?_6:
   \   000000 48 53 45 0D  DC8 "HSE\015"
   \          00          

   \                                 In section .near.rodata, align 1
   \                     ?_7:
   \   000000 4C 53 45 0D  DC8 "LSE\015"
   \          00          
    154          
    155          
    156          #ifdef USE_FULL_ASSERT
    157          
    158          /**
    159            * @brief  Reports the name of the source file and the source line number
    160            *   where the assert_param error has occurred.
    161            * @param file: pointer to the source file name
    162            * @param line: assert_param error line source number
    163            * @retval : None
    164            */
    165          void assert_failed(u8* file, u32 line)
    166          { 
    167            /* User can add his own implementation to report the file name and line number,
    168               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    169          
    170            /* Infinite loop */
    171            while (1)
    172            {
    173            }
    174          }
    175          #endif
    176          
    177          /************************** (C) COPYRIGHT 2014 DarrenTang *********************/
    178          /********************************  END OF FILE  *******************************/
    179          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?_0
      19  ?_1
       5  ?_2
      26  ?_3
       5  ?_4
       5  ?_5
       5  ?_6
       5  ?_7
     256  SystemInit
      51  TIme4_CallBack
      11  main
       1  sys_status
       1  sysclock
       1  sysclockType
       3  sysclock_string
       1  systick1
       1  systick2
       1  systick_times
      10  task_key
      18  task_test_blink
       1  tasks_ready

 
   7 bytes in section .near.bss
   3 bytes in section .near.data
  88 bytes in section .near.rodata
 346 bytes in section .near_func.text
 
 346 bytes of CODE  memory
  88 bytes of CONST memory
  10 bytes of DATA  memory

Errors: none
Warnings: none
